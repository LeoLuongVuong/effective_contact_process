?Inf
events<-data.frame("NextCtc"=Inf,"TestPositive"=Inf, "Recovery"=Inf)
events$NextCtc<-c(2,3)
events$NextCtc<-2
events$TestPositive<-3
events$Recovery<-4
next.evts<-colnames(events)[which(min(events)==events)]
next.evts
length(next.evts)
next.contact<-c(1,3,1,5,4)
min(next.contact)
length(next.contact)
?which
contact.time<-data.frame("id"=1:n,"pr.ctc"=rep(NA,n),"pr.infectee"=rep(NA,n))
contact.time<-data.frame("id"=1:10,"pr.ctc"=rep(NA,10),"pr.infectee"=rep(NA,10))
for j in c(1:5){contact.time$pr.ctc[j]<-rexp(1,transmission.parameters$contact_rate[first])}
for (j in c(1:5)){contact.time$pr.ctc[j]<-rexp(1,transmission.parameters$contact_rate[first])}
for (j in c(1:5)){contact.time$pr.ctc[j]<-rexp(1,5)}
contact.time
events
infector<-sample(which(contact.time==current.time),1)
current.time<-events$NextCtc
infector<-sample(which(contact.time==current.time),1)
infector
infector<-sample(which(contact.time==current.time)
)
infector
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
return(list(c(dS,dI,dR)))
})
}
sir_model
# LOAD THE PACKAGES:
library(deSolve)   # package to solve the model
library(reshape2)  # package to change the shape of the model output
library(ggplot2)   # package for plotting
# MODEL INPUTS:
initial_number_susceptible <- 999999     # the initial susceptible population size
initial_number_infected <- 1             # the initial infected population size
initial_number_recovered <- 0            # the initial number of people in the recovered state
force_of_infection <- 0.2                # the force of infection lambda, in units of days^-1
recovery_rate <- 1/10                    # the rate of recovery gamma, in units of days^-1
follow_up_duration <- 60                 # the duration to run the model for, in units of days
# The initial state values are stored as a vector and each value is assigned a name.
initial_state_values <- c(S = initial_number_susceptible,I = initial_number_infected,
R = initial_number_recovered)
# Parameters are also stored as a vector with assigned names and values.
parameters <- c(gamma = recovery_rate,lambda = force_of_infection)
# In this case we only have two parameters, lambda and gamma.
# TIMESTEPS:
# The times vector creates a sequence of timepoints at which we want to
# calculate the number of people in the S, I and R compartments.
times <- seq(from = 0, to = follow_up_duration, by = 1)
# SIR MODEL FUNCTION
# We are renaming this to sir_model.
# Remember to include the input arguments,
# differential equations and output objects here.
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -lambda * S
dI <- lambda * S - gamma * I
dR <- gamma * I
return(list(c(dS,dI,dR)))
})
}
# MODEL OUTPUT (solving the differential equations):
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = sir_model,
parms = parameters))
output
# Plot:
# First turn the output dataset into a long format, so that the number in each compartment
# at each timestep are all in the same column
output_long <- melt(as.data.frame(output), id = "time")
# Plot the number of people in each compartment over time
ggplot(data = output_long,           # specify object containing data to plot
aes(x=time,y = value, colour = variable, group = variable)) + # assign columns to axes and groups
geom_line() +                     # represent data as lines
xlab("Time (days)")+              # add label for x axis
ylab("Number of people") +
labs(title = paste("Number susceptible, infected and recovered over time when lambda =",parameters["lambda"],"days^-1 and gamma =",
parameters["gamma"],"days^-1"))          # add label for y axis
